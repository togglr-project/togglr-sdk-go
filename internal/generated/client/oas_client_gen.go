// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// GetFeatureHealth invokes GetFeatureHealth operation.
	//
	// Get health status of feature (including auto-disable state).
	//
	// GET /sdk/v1/features/{feature_key}/health
	GetFeatureHealth(ctx context.Context, params GetFeatureHealthParams) (GetFeatureHealthRes, error)
	// ReportFeatureError invokes ReportFeatureError operation.
	//
	// Report feature execution error (for auto-disable).
	//
	// POST /sdk/v1/features/{feature_key}/report-error
	ReportFeatureError(ctx context.Context, request *FeatureErrorReport, params ReportFeatureErrorParams) (ReportFeatureErrorRes, error)
	// SdkV1FeaturesFeatureKeyEvaluatePost invokes POST /sdk/v1/features/{feature_key}/evaluate operation.
	//
	// Returns feature evaluation result for given project and context.
	// The project is derived from the API key.
	//
	// POST /sdk/v1/features/{feature_key}/evaluate
	SdkV1FeaturesFeatureKeyEvaluatePost(ctx context.Context, request EvaluateRequest, params SdkV1FeaturesFeatureKeyEvaluatePostParams) (SdkV1FeaturesFeatureKeyEvaluatePostRes, error)
	// SdkV1HealthGet invokes GET /sdk/v1/health operation.
	//
	// Health check for SDK server.
	//
	// GET /sdk/v1/health
	SdkV1HealthGet(ctx context.Context) (SdkV1HealthGetRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// GetFeatureHealth invokes GetFeatureHealth operation.
//
// Get health status of feature (including auto-disable state).
//
// GET /sdk/v1/features/{feature_key}/health
func (c *Client) GetFeatureHealth(ctx context.Context, params GetFeatureHealthParams) (GetFeatureHealthRes, error) {
	res, err := c.sendGetFeatureHealth(ctx, params)
	return res, err
}

func (c *Client) sendGetFeatureHealth(ctx context.Context, params GetFeatureHealthParams) (res GetFeatureHealthRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/sdk/v1/features/"
	{
		// Encode "feature_key" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "feature_key",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.FeatureKey))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/health"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, GetFeatureHealthOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetFeatureHealthResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ReportFeatureError invokes ReportFeatureError operation.
//
// Report feature execution error (for auto-disable).
//
// POST /sdk/v1/features/{feature_key}/report-error
func (c *Client) ReportFeatureError(ctx context.Context, request *FeatureErrorReport, params ReportFeatureErrorParams) (ReportFeatureErrorRes, error) {
	res, err := c.sendReportFeatureError(ctx, request, params)
	return res, err
}

func (c *Client) sendReportFeatureError(ctx context.Context, request *FeatureErrorReport, params ReportFeatureErrorParams) (res ReportFeatureErrorRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/sdk/v1/features/"
	{
		// Encode "feature_key" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "feature_key",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.FeatureKey))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/report-error"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeReportFeatureErrorRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, ReportFeatureErrorOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeReportFeatureErrorResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SdkV1FeaturesFeatureKeyEvaluatePost invokes POST /sdk/v1/features/{feature_key}/evaluate operation.
//
// Returns feature evaluation result for given project and context.
// The project is derived from the API key.
//
// POST /sdk/v1/features/{feature_key}/evaluate
func (c *Client) SdkV1FeaturesFeatureKeyEvaluatePost(ctx context.Context, request EvaluateRequest, params SdkV1FeaturesFeatureKeyEvaluatePostParams) (SdkV1FeaturesFeatureKeyEvaluatePostRes, error) {
	res, err := c.sendSdkV1FeaturesFeatureKeyEvaluatePost(ctx, request, params)
	return res, err
}

func (c *Client) sendSdkV1FeaturesFeatureKeyEvaluatePost(ctx context.Context, request EvaluateRequest, params SdkV1FeaturesFeatureKeyEvaluatePostParams) (res SdkV1FeaturesFeatureKeyEvaluatePostRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/sdk/v1/features/"
	{
		// Encode "feature_key" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "feature_key",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.FeatureKey))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/evaluate"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeSdkV1FeaturesFeatureKeyEvaluatePostRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, SdkV1FeaturesFeatureKeyEvaluatePostOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSdkV1FeaturesFeatureKeyEvaluatePostResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SdkV1HealthGet invokes GET /sdk/v1/health operation.
//
// Health check for SDK server.
//
// GET /sdk/v1/health
func (c *Client) SdkV1HealthGet(ctx context.Context) (SdkV1HealthGetRes, error) {
	res, err := c.sendSdkV1HealthGet(ctx)
	return res, err
}

func (c *Client) sendSdkV1HealthGet(ctx context.Context) (res SdkV1HealthGetRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/sdk/v1/health"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSdkV1HealthGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
